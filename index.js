// t·∫°o m·∫£ng ch·ª©a gi√° tr·ªã d·∫°ng table
const VALUES = [
  { id: "keo", value: "‚úåüèΩ" },
  { id: "bua", value: "‚úäüèΩ" },
  { id: "bao", value: "üñêüèΩ" },
];
// khi th·∫Øng: indexPlayer - indexComputer = 1 || -2
// khi thua: indexPlayer - indexComputer = 0
// khi h√≤a: else

//h√†m ƒë·ªïi gi√° tr·ªã cho m√°y li√™n t·ª•c
let i = 0;
const handleChange = () => {
  let computer = document.querySelector("#computer");
  computer.textContent = VALUES[i].value;
  computer.dataset.id = VALUES[i].id; //c√†i th√™m data-id cho computer
  i = i === VALUES.length - 1 ? 0 : ++i;
};

let interval = setInterval(handleChange, 100);
//l∆∞u interval ƒë·ªÉ d√†nh cho tr∆∞·ªùng h·ª£p c·∫ßn d·ª´ng l·∫°i

//vi·∫øt h√†m so s√°nh 2 gi√° tr·ªã valuePlayer v√† valueComputer
const compare = (valuePlayer, valueComputer) => {
  let indexPlayer = VALUES.findIndex((item) => item.id == valuePlayer);
  let indexComputer = VALUES.findIndex((item) => item.id == valueComputer);
  result = indexPlayer - indexComputer;
  if (result == 1 || result == -2) return 1;
  else if (result == 0) return 0;
  else return -1;
};
//s∆∞j ki·ªán click c·ªßa ng ch∆°i
const playerItems = document.querySelectorAll(".user");
playerItems.forEach((item) => {
  item.addEventListener("click", (event) => {
    clearInterval(interval); //d·ª´ng m√°y l·∫°i
    let valuePlayer = event.target.id;
    let valueComputer = computer.dataset.id;
    let result = compare(valuePlayer, valueComputer);

    //duy·ªát t·ª´ng n√∫t user x√≥a h·∫øt actived
    playerItems.forEach((_item) => {
      _item.classList.remove("actived");
      _item.style.pointerEvents = "none";
    });
    //th√™m actived cho th·∫±ng v·ª´a nh·∫•n
    event.target.classList.add("actived");

    //t·∫°o th√¥ng b√°o
    const alertDiv = document.createElement("div");
    alertDiv.classList.add("alert");
    let msg = "";
    if (result == 1) {
      msg = "Th·∫Øng r·ªìi nhe";
      alertDiv.classList.add("alert-success");
    } else if (result == 0) {
      msg = "H√≤a r√≤i nhe";
      alertDiv.classList.add("alert-warning");
    } else {
      msg = "G√† v√£i l√≤ n";
      alertDiv.classList.add("alert-dark");
    }
    alertDiv.textContent = msg;
    document.querySelector(".notification").appendChild(alertDiv);
    document.querySelector("#play-again").classList.remove("d-none");
  });
});

//event ch∆°i l·∫°i
document.querySelector(".btn-play-again").addEventListener("click", (even) => {
  clearInterval(interval);
  interval = setInterval(handleChange, 100);
  //x√≥a actived
  playerItems.forEach((item) => {
    item.classList.remove("actived");
    item.style.pointerEvents = "";
  });
  //x√≥a n·ªôi dung trong ph·∫ßn th√¥ng b√°o
  document.querySelector(".notification").innerHTML = "";
  document.querySelector("#play-again").classList.add("d-none");
});
